import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Deque;
import java.util.PriorityQueue;
public class App {
    public static void main(String[] args) throws Exception {
        System.out.println("\nGabriel Marcelo Mu√±oz Callisaya CI: 9873103");
        System.out.println("\nStack String:");
        Stack<String> ss = new Stack<String>();
        ss.push("cad1");
        ss.push("cad2");
        System.out.println(ss);
        ss.pop();
        System.out.println(ss + " " + ss.empty());
        System.out.println("\nStack Integer:");
        Stack<Integer> si = new Stack<Integer>();
        si.push(2);
        si.push(4);
        System.out.println(si);
        si.pop();
        System.out.println(si + " " + si.empty());
        System.out.println("\nStack Persona:");
        Stack<Persona> sp = new Stack<Persona>();
        sp.push(new Persona("Jose", 24));
        sp.push(new Persona("Pepe", 20));
        System.out.println(sp);
        sp.pop();
        System.out.println(sp + " " + sp.empty());   

        System.out.println("\nQueue String:");
        Queue<String> qs = new LinkedList<String>();
        qs.offer("cad1");
        qs.offer("cad2");
        System.out.println(qs);
        qs.poll();
        System.out.println(qs + " " + qs.isEmpty());
        System.out.println("\nQueue Integer:");
        Queue<Integer> qi = new LinkedList<Integer>();
        qi.offer(2);
        qi.offer(4);
        System.out.println(qi);
        qi.poll();
        System.out.println(qi + " " + qi.isEmpty());
        System.out.println("\nQueue Persona:");
        Queue<Persona> qp = new LinkedList<Persona>();
        qp.offer(new Persona("Jose", 24));
        qp.offer(new Persona("Pepe", 20));
        System.out.println(qp);
        qp.poll();
        System.out.println(qp + " " + qp.isEmpty());  

        System.out.println("\nDeque String:");
        Deque<String> ds = new LinkedList<String>();
        ds.offerFirst("cad1");
        ds.offerLast("cad2");
        System.out.println(ds);
        ds.pollLast();
        System.out.println(ds + " " + ds.isEmpty());
        System.out.println("\nDeque Integer:");
        Deque<Integer> di = new LinkedList<Integer>();
        di.offerFirst(2);
        di.offerLast(4);
        System.out.println(di);
        di.poll();
        System.out.println(di + " " + di.isEmpty());
        System.out.println("\nDeque Persona:");
        Deque<Persona> dp = new LinkedList<Persona>();
        dp.offerFirst(new Persona("Jose", 24));
        dp.offerLast(new Persona("Pepe", 20));
        System.out.println(dp);
        dp.poll();
        System.out.println(dp + " " + dp.isEmpty());  

        System.out.println("\nPriorityQueue String:");
        PriorityQueue<String> ps = new PriorityQueue<String>();
        ps.offer("cad1");
        ps.offer("cad2");
        System.out.println(ps + " " + ps.size());
        ps.poll();
        System.out.println(ps + " " + ps.isEmpty());
        System.out.println("\nPriorityQueue Integer:");
        PriorityQueue<Integer> pi = new PriorityQueue<Integer>();
        pi.offer(2);
        pi.offer(4);
        System.out.println(pi + " " + pi.size());
        pi.poll();
        System.out.println(pi + " " + pi.isEmpty());
        System.out.println("\nPriorityQueue Persona:");
        PriorityQueue<Persona> pp = new PriorityQueue<Persona>();
        pp.offer(new Persona("Jose", 24));
        pp.offer(new Persona("Pepe", 20));
        System.out.println(pp + " " + pp.size());
        pp.poll();
        System.out.println(pp + " " + pp.isEmpty()); 
    }
}
